function print2() {
    alert("hello hello");
}

// Comments in JS - Excluded by Interpreter 

// Single Line 
/* Multi Line */

// Other Programming lang - tightly couple data type with the variable

// JS - loosely coupled 

var myName;
myName = 2;

var a = 20;
typeof (a);    // Number 

a = "shubham";
typeof (a);     // String


// *******************************   Data Types   *************************************

/*  2 Types of DT

    > Primitive DT - Basic
    > Reference DT - refer the basic ones

    >>>>>>>>>>>>>>>>>>>>>   Primitive  >>>>>>>>>>>>>>>>>>>>>>>>>>>

        > Number
        > String
        > Boolean
        > Null 
        > Undefined 

    >>>>>>>>>>>>>>>>>>>>  Reference   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        > Array
        > Objects
        > Functions  */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  Number >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = 20;
var b = 20.555;

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> String >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var FN = "Shubham";
var LN = 'Arora';

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>  Boolean   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var isVaccinated = true;
var isEligibleForDriving = false;

//  >>>>>>>>>>>>>>>>>>>>>>>>>   Undefined  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var abc;
console.log(abc);     // undefined
typeof (abc);         // Undefined

// >>>>>>>>>>>>>>>>>>>>>>>>>>>  Null  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var arr = [1, 2, 3];
arr = null;
arr;               //  null
typeof (arr);      // {} signifies empty 


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>  Undefined vs Null  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// Undefined is default, NULL is explicitly given
// typeOf(undefined) = Undefined
// typeOf(Null) = Object like {}


//  >>>>>>>>>>>>>>>>>>>>>>>>   Reference DT  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//   >>>>>>>>>>>>>>>>>  Arrays  >>>>>>>>>>>>>>>>>>>>>>>>>>>

// Array - homogeneous DT 

var students = ["Shubham", "Sakshi", "Mayank"];   // Array of Strings 

var numbers = [1, 2, 3, 4, 5];  // Array of Numbers 

students[1]  // Sakshi

//   >>>>>>>>>>>>>>>>>  Objects  >>>>>>>>>>>>>>>>>>>>>>>>>>>

var student1 = {
    rollNo: 1,
    FN: "Shubham",
    LN: "Arora",
    address: "Delhi",
    age: 30,
    isVaccinated: true
};

student1.age
student1["FN"]

// Array of Objects 

var students = [{
    rollNo: 1,
    FN: "Shubham",
    LN: "Arora",
    address: "Delhi",
    age: 30,
    isVaccinated: true
}, {
    rollNo: 2,
    FN: "Sakshi",
    LN: "Arora",
    address: "Delhi",
    age: 26,
    isVaccinated: true
}, {
    rollNo: 3,
    FN: "Mayank",
    LN: "Arora",
    address: "Delhi",
    age: 28,
    isVaccinated: true
}];

var calculation = {
    sum: function (num1, num2) {
        return num1 + num2;
    },
    subtract: function (num1, num2) {
        return num1 - num2;
    }
}

calculation.sum();
calculation.subtract();

students[1].FN   // Sakshi

// *******************************  Functions  ************************************

// re-use the code wherever required

// Function Declaration 

function sum(num1, num2) {
    return num1 + num2;
}

// Arrow function syntax

sum = (num1, num2) => {
    return num1 + num2;
}


//*****************************  Function Overloading  ********************************

function sum(num1, num2) {
    return num1 + num2;
}


function sum(num1, num2, num3) { //this fn will override the previous fn with the same name from Global Execution Context and future fn calls will refer this fn
    return num1 + num2 + num3;
}

// Execution of the Function

sum(3, 5);  // NaN
sum(5, 8);  // NaN

sum(1, 2, 3); //6
 //------------------------------------------------------------------------------------------

 function sum(num1, num2, num3) { 
    return num1 + num2 + num3;
}

 function sum(num1, num2) {//this fn will override the previous fn with the same name from Global Execution Context and future fn calls will refer this fn
    return num1 + num2;
}

// Execution of the Function

sum(3, 5);  // 8 
sum(5, 8);  // 13

sum(1, 2, 3); //3


// ***************************   Advance Operations with Reference DT  ****************************


// ******************   Arrays   *****************************

// Array - LIFO 

var students = ["Shubham", "Sakshi", "Mayank"];

students.push("Prerna");  // ["Shubham", "Sakshi", "Mayank", "Prerna"];

students.pop();   // ["Shubham", "Sakshi", "Mayank"];

students.unshift("Trisha");  // ["Trisha", "Shubham", "Sakshi", "Mayank"];

students.shift();   // ["Shubham", "Sakshi", "Mayank"];



// ***********************   Iteration  **********************************

var arr = [1, 2, 3, 4, 5, 6, 7];

for (var i = 0; i <= arr.length; i++) {
    arr[i] * 3
}

//   *******************  map  ********************

var arr = [1, 2, 3, 4, 5, 6, 7];

arr.map((item) => { return item * 3 });  // [3,6,9,12,15,18,21]

var output = arr.map(item => item * 3);    // [3,6,9,12,15,18,21]

output  // [3,6,9,12,15,18,21]
arr     // [1, 2, 3, 4, 5, 6, 7];

//  *********************  filter  **************************

var arr = [1, 2, 3, 4, 5, 6, 7];

arr.filter((item) => { return item % 2 == 0 });   // [2,4,6]

var evenArr = arr.filter(item => item % 2 == 0);   // [2,4,6]

var oddArr = arr.filter(item => item % 2 != 0);   // [1,3,5,7]

arr.filter(item => item > 8);   // []

evenArr  // [2,4,6]
arr      // [1, 2, 3, 4, 5, 6, 7];


//  ****************************  Concatenation of Arrays ************************

var arr1 = [1, 2, 3];
var arr2 = [4, 5, 6];

arr1.concat(arr2);   // [1,2,3,4,5,6]


// ****************************   find   ************************************

var arr = [1, 2, 3, 4, 5, 6, 7];

arr.find((item) => { return item % 2 == 0 });   // 2

arr.find(item => item % 2 == 0);   // 2

arr.find(item => item > 8);      // undefined

// **************************   Slice   ****************************************

var arr = [1, 2, 3, 4, 5, 6, 7];

arr.slice(3, 6);   // [4,5,6]

//  ***********************************   Sort   ******************************

var arr = [22, 13, 234, 555, 6, 87];

arr.sort((a, b) => a - b);  // Ascending Order
arr.sort((a, b) => b - a);  // Descending Order


// ****************************  Operators ************************************

/*      > Arithemetic
        > Assignment
        > Comparion
        > Logical
*/

// *****************************   Arithemetic   ******************************* 

var a = 3 + 6;
var a = 4 - 2;
var a = 5 * 4;
var a = 6 / 3;  // 2 
var a = 7 % 3;  // 1

// ************************  Assignment  ************************************ 

var a = 5;

var a = a + 3;    // 8 

a += 3;
a -= 3;
a *= 4;
a /= 3;
a %= 3;

var b = 5;

// Post Increment 

b++;   // 5
b;     // 6

// Pre Increment 

++b;   // 6
b;     // 6

// ****************  Comparion Operator -- Boolean Output  **************************

2 == 5   // False

2 === 5   // False

2 == '2'   //  True
2 === '2'  //  False

2 != 4  //  True

2 !== '2'  // False

2 !== 2   // False


4 > 3
5 >= 3
3 <= 4
3 < 9

// ***************   Logical Operators  ***********************

True && True       // True 
True && False     // False
False && True     // False
False && False    // False 

True || True   // True 
True || False  // True
False || True  // True
False || False  // False

!True     // False
!False    // True


2 != 2

    (3 > 9) && (4 < 9)   // False


// *****************************  I/O Operators **********************************

// **********************  Output  ****************************

/*    > innerHTML
      > document.write
      > console.log
      > alert
*/

// ********************  Input  *****************************

/*
    > prompt
    > confirm
*/

function printConsole() {
    console.log("Hi");
}

function printAlert() {
    alert("Hi");
}

function printHTML() {
    var element = document.getElementById("one");
    element.innerHTML = "Hi... Welcome to Edureka...";
}

function printWrite() {
    document.write("Hi... Welcome to Internship Program");
}

function enterName() {
    var name = prompt("Enter your Name");
    var element = document.getElementById("two");
    element.innerHTML = "Hi..." + " " + name + " " + "Welcome to Edureka...";
}

function enterConfirm() {
    var output = confirm(" Are you sure, you want to delete ?");
    var element = document.getElementById("two");
    if (output) {
        element.setAttribute('style', 'display:none');
    }
    else {
        alert("Data is not deleted ... please continue ");
    }
}

function Over() {
    var element = document.getElementById("three");
    element.setAttribute('style', 'background-color:green');
}

function Out() {
    var element = document.getElementById("three");
    element.setAttribute('style', 'background-color:red');
}


// *************************   Classes   ***********************************

// BluePrint of an Object 
// Class contains Data Members & Member Functions 


class array{
	stud = [1, 2, 3, 4, 5]
  
  print = () =>  this.stud.map(item => item)
}

let obj0 = new array()

console.log(obj0.print())

//-----------------------Static class---------------------

// class arr{
//     arr = [2, 4, 5]
//     static print = () => {
//       console.log('class is called')
//     }
//   }
//   arr.print()

// =======================================================
class Students {
    students = [{
        rollNo: 1,
        name: "Shubham",
        city: "Delhi"
    },
    {
        rollNo: 2,
        name: "Sakshi",
        city: "Delhi"
    },
    {
        rollNo: 3,
        name: "Shubhi",
        city: "Delhi"
    }];

    print = () => {
        return this.students.map(item => item.name);
    }

    getStudentByRollNo = (inputRollNo) => {
        return this.students.find(item => item.rollNo == inputRollNo);
    }
}

// Students.print();   // Private Members 

var studentObj = new Students();
studentObj.print();
studentObj.getStudentByRollNo(3);


//  constructor - initialize the DM of the class 

class Students {
    constructor(studentsList) {
        this.students = studentsList;
    }

    print = () => {
        return this.students.map(item => item.name);
    }

    getStudentByRollNo = (inputRollNo) => {
        return this.students.find(item => item.rollNo == inputRollNo);
    }
}

var obj1 = new Students([{
    rollNo: 1,
    name: "Shubham",
    city: "Delhi"
},
{
    rollNo: 2,
    name: "Sakshi",
    city: "Delhi"
},
{
    rollNo: 3,
    name: "Shubhi",
    city: "Delhi"
}]);
obj1.print();
obj1.getStudentByRollNo(3);



var obj2 = new Students([{
    rollNo: 1,
    name: "Afreen",
    city: "Delhi"
},
{
    rollNo: 2,
    name: "Mayank",
    city: "Delhi"
},
{
    rollNo: 3,
    name: "Ritu",
    city: "Delhi"
}]);
obj2.print();
obj2.getStudentByRollNo(3);

//======================================================================================================
class student{
	constructor(val){
  	this.stud = val;
  }
  
  print = () => this.stud.map(item => item)
}

let obj2 = new student([1, 2, 3, 4, 5])

console.log(obj2.print())
//  ******************************    Strings   ******************************************

// String - Array of Characters 

var FN = "Shubham";
var LN = "Arora";

FN.charAt(3);  // b

FN.slice(2, 5);   // ubh

FN.concat(LN);

FN.indexOf('b');      // 3
FN.lastIndexOf('h');   // 4

// Check the presence of a character in a string 

if (FN.indexOf('m') == -1) {
    alert("Character doesn't exists")
} else {
    alert("Character exists")
}

var key = 'Shubham_90';

key.split('');  // ['S', 'h', 'u', 'b', 'h', 'a' , 'm', '_' , '9' , '0'];

key.split('_');  // ["Shubham", "90"]

var key1 = 'Shubham_arora_90_bye';

key1.split('_');   // ["Shubham", "arora", "90", "bye"];

// Practical Use

var key3 = 'shubham_89';

key3.split('_')[1];   // 89

var name = "Shubham Arora";

name.split(' ')[0];  // Shubham

var FN = "Shubham";

FN.substr(2, 5);  // ubham //start from 2 and count 5 char

FN.substring(2, 5);  // ubh 


//  ******************************    Objects   *****************************************

var obj = {
    name: "shubham",
    age: 30,
    city: "delhi"
};

obj.age;

var keyName = "age";
obj[keyName];          // 30

Object.keys(obj);  // ['name', 'age', 'city'];

Object.values(obj);   // ['Shubham', '30', 'delhi'];



// *****************************  Assignment - 3 **********************************

// Question - 1 

class restaurantManager {
    restaurantList = [
        {
            name: "KFC",
            address: 'Shalimar, Bagh',
            city: "Delhi"
        },
        {
            name: "Dominos",
            address: 'Civil Lines',
            city: "Delhi"
        },
        {
            name: "Burger King",
            address: 'Chinchwadi',
            city: "Pune"
        }
    ];

    printRestaurants = () => {
        return this.restaurantList.map(item => item.name);
    }

    getRestaurantsByCity = (inputCity) => {
        return this.restaurantList.filter(item => item.city.toLowerCase() == inputCity.toLowerCase());
    }
}

var restaurantObj = new restaurantManager();
restaurantObj.printRestaurants();
restaurantObj.getRestaurantsByCity('delhi');


// Question - 2

var ordersData = {
    'Below 500': 50,
    '500-1000': 48,
    '1000-1500': 56,
    '1500-2000': 34,
    '2000-2500': 24,
    'Above 2500': 49,
};

// a.> 

var total = Object.values(ordersData).reduce((a, b) => a + b, 0);  // 261

// b.>

Object.keys(ordersData).length;   // 6

// c.>

Object.keys(ordersData).map((item, index) => {
    return {
        id: index + 1,
        order: item,
        'order percentage': ((ordersData[item] / total) * 100).toFixed(2),
        restaurant: "Punjabi Tadka"
    }
})

// ****************************   Looping Statements   ***********************************

for (var i = 0; i < 100; i++) {
    console.log("Shubham");
}

var i = 0;
while (i < 100) {
    console.log("Shubham");
    i++;
}
// -----------------------------------
let i = 1;
function recur(){


    setTimeout(() => {
    console.log(i)
    if(i<5) {
      i++
      recur()
    }
    
  }, i * 1000)
 
}
recur()

// ------------------------------------------
let sum = 0
function recur(n){
	if(n>0){
  	sum+=n
  	n--
  	recur(n)
    return sum
  }
}

console.log(recur(4))
// **********************   Conditinal Statements  ********************************

var age = 30;

if (age > 18) {
    alert("Eligible for Driving...");
}
else {
    alert("Not Eligible for Driving...");
}

var color = 'white';

if (color == "red") {
    alert('Color is Red');
} else if (color == "green") {
    alert('Color is Green');
} else if (color == "blue") {
    alert('Color is Blue');
} else if (color == "White") {
    alert('Color is White');
} else {
    alert('Color is UnMatched');
}

var color = 'white';

switch (color) {
    case 'red':rr
        alert('Color is Red');
        break;
    case 'green':
        alert('Color is Green');
        break;
    case 'blue':
        alert('Color is Blue');
        break;
    case 'white':
        alert('Color is White');
        break;
    default:
        alert('Color is UnMatched');
}

// **************************  Math  ***********************************************

Math.random();
Math.sqrt(9);    // 3
Math.pow(3, 10);
Math.max(2, 3, 2, 90, 23, 566);

var r = 3;
var Area = Math.PI * Math.pow(r, 2);

// ****************************  Date  ***************************************************

var dateObj = new Date();
dateObj.getDate();
dateObj.getDay();
dateObj.getMonth();
dateObj.getSeconds();

// ***********************************  EcmaScript  *************************************

// EcmaScript - Community of Developer which comes up with Rules & Regulations for JS

// 2005 - ES5 - Standards of JS 
// 2015 - ES6

// Transpilers - ES6 to ES5

/* ****************  ES6 Features  ***************************

        > Template String
        > Ternary Operator
        > Let & Const
        > Classes
        > This keyword
        > Arrow functions
        > Default Params
        > IIFE
        > Query String
        > Object Destructuring
        > Call, Apply & Bind
        > Hoisting
        > Callback Functions
        > Promises
        > Async/Await
        > Concise Functions
        > Spread Operator
        > Rest Operator
*/

// ****************************  Template String  *****************************

// String Concatenation
// Multi Line String

var FN = "Shubham";
var LN = "Arora";

var output = "My name is" + " " + FN + " " + LN + ", " + "I am fullstack developer" + ".";

var output = `My name is ${FN} ${LN}, I am fullstack developer.`;

<div>{`Shubham
    Arora`}</div>


// **********************************  Ternary Operator  **************************

var age = 30;

var isEligibleForDriving;

if (age >= 18) {
    isEligibleForDriving = true;
} else {
    isEligibleForDriving = false;
}

// ------------------------------------------------------------------

var age = 30;

var isEligibleForDriving = age >= 18 ? true : false;


// -----------------------------------------------------------


var age = 22;

var output;

if (age >= 18) {
    output = "Eligible";
} else if (age >= 25) {
    output = "Perfectly Eligible";
} else {
    output = "Not Eligible";
}

// ------------------------------------------------------------------

var age = 22;

var output = age >= 18 ? (age >= 25 ? "Perfectly Eligible" : "Eligible") : "Not Eligible";



//   *********************************   Arrow Functions  ***************************

function sum(a, b) {
    return a + b;
}

sum = (a, b) => a + b;

// ****************************  Query String  *******************************

// www.flipkart.com/home?selection="mobiles"&price="less than 5000"

// selection="mobiles"&price="less than 5000"


// ****************************  Object Destructuring ******************************

var student = {
    name: 'shubham',
    age: 30,
    city: "Delhi"
};

var name = student.name;
var age = student.age;

var { name, age } = student;

console.log(age);  // 30


var { name, age, address } = student;

console.log(address);   // undefined

// *******************  Assignment - 4  *****************************

var ratingData = [
    { restaurant: "KFC", rating: 4 },
    { restaurant: "BK", rating: 3 },
    { restaurant: "Dominos", rating: 5 },
    { restaurant: "KFC", rating: 2 },
    { restaurant: "BK", rating: 1 },
    { restaurant: "BK", rating: 5 },
    { restaurant: "Pizza Hut", rating: 5 }
];

// Hint - 

// Step - 1 : Compute an Array of Unique Restaurants like ["KFC", "BK", "Dominos", "Pizza Hut"]
// Step - 2 : Iterate this Array ["KFC", "BK", "Dominos"] and then calculate the Avearge 


// Step 1 : Get Unique Restaurants  

var uniqueRestaurants = ratingData.map(item => item.restaurant).filter((item, i, ar) => ar.indexOf(item) === i);

// Step - 2 : Calculate the Average 

uniqueRestaurants.map(unique => {
    var filteredRestaurants = ratingData.filter(item => item.restaurant == unique);
    var sum = filteredRestaurants.reduce((a, b) => a + b.rating, 0);
    return {
        restaurant: unique, averageRating: sum / filteredRestaurants.length
    }
}
)

// Expected Output ---> 

[{
    averageRating: 4.5,
    restaurant: "KFC"
}, {
    averageRating: 3,
    restaurant: "BK"
}, {
        averageRating: 3,
        restaurant: "Dominos"
    }]


// **************   Rest Operator  *****************

// usage - function params

function sum(a, b) {
    return a + b;
}

function sum(a, b, c) {
    return a + b + c;
}

sum(2, 3, 3);

function sum(a, b, ...c) {
    return a + b + c.reduce((x, y) => x + y);
}

sum(2, 3, 4, 5, 7, 8, 9, 3, 4, 324, 34, 34)


// **********************  Spread Operator  ************************************

/* usage - 

    > Copy/Replica of Reference Data Types
    > Concat Reference Types

*/

var arr = [1, 2, 3, 4, 5];

var copyArr = arr;

copyArr.push(6);[1, 2, 3, 4, 5, 6];
arr[1, 2, 3, 4, 5, 6];

//  ********   Copy/Replica of Reference Data Types   ************

var arr = [1, 2, 3, 4, 5];

var copyArr = [...arr];

copyArr.push(6);[1, 2, 3, 4, 5, 6];
arr[1, 2, 3, 4, 5];

var obj = { name: "shubham" };

var copyObj = { ...obj };
//======================================================================
var student = {
    name: 'shubham',
    age: 30,
    city: "Delhi"
};


var newstudent = {
...student,
age: 40
}

console.log(newstudent)
// ===================================================================
let arr = ['a', 'b', 'c'];

function names(n1, n2, n3){
	console.log(n1, n2, n3)
}

names(arr[0], arr[1], arr[2])
names(...arr)

// ************  Concat Reference Types   ***************

var arr1 = [1, 2, 3];
var arr2 = [4, 5, 6];

var arr = [...arr1, ...arr2];  // [1,2,3,4,5,6]

//  -------------------  Object  --------------------

var obj = { FN: "shubham", age: 30 };

var updatedObj = { ...obj, LN: "Arora" };

var updatedObj = {
    FN: "shubham",
    age: 30,
    LN: "Arora"
};

// ********************   Async Programming in JS  ***********************************

// JS is Synchronous 

// Next block of code to wait for previous response

// Logic - 10 sec waiting 

// Example - Payment Gateway , API Call's etc

    

//  ********************************  Ways to Implement Async Programming in JS  **************************************

/*   	> Callback Methods
    > Promises
    > Async Await 
*/

function a() {
    console.log("Hi");
}

function b(xyz) {
    xyz();
}

b(a); // Hi

// a -> Callback Function
// b -> Higher Order Function(HOF)

arr.reduce((a, b) => { return a + b });



// **********************************  Practically Async Behaviour  ************************************

async function API_CALL(callback) {
    await response;
    response = fetch(); // API Call;
    if (response) {
        callback();
    }
}

function Bind_Data() {
    // Logic of binding the data in UI 
}


API_CALL(Bind_Data);



// Callback executes once the functionality of HOF is completed 


// **********************************************  Promises  *******************************************

// After 4 months 
if (marks > 90) {
    // gift him/her car 
}
else {
    // no gifts 
}

// Waiting 


/* 3 States of Promises 

    > Resolved - then 
    > Rejected - catch
    > InProgress  
*/

// API CALL 

// 10ms for the Response

axios()
    .then( // Binding the Response in UI 
    )
    .catch( // Show the Error 
    )



// -----------------------------------------   Loader in UI  ----------------------------------------------

function onClick() {
    loader = true;
    axios()
        .then( // loader = false && Binding the Response in UI 
        )
        .catch( // loader = false && Show the Error 
        )
}

// **************************  Concise Functions  ********************************

var obj = {
    name: "Shubham",
    getAverage: function (x, y) {
        return x + y / 2
    }
}

obj.getAverage();


var obj = {
    name: "Shubham",
    getAverage(x, y) {
        return x + y / 2
    }
}

obj.getAverage();

// *************************   Function Overloading ************************

function sum(a, b, c) {
    return a + b + c;
}

function sum(a, b) {
    return a + b;
}

sum(2, 3, 4);

sum(2, 3);


// ********************************  Default Params  ************************************

function sum(a, b, c) {
    return a + b + c;
}

sum(2, 3);      //  Error : In Other Prog Lang 

// In JS - 

c = undefined;

sum(2, 3);  // NaN

// output : NaN

// -------------------------------------------------------

function sum(a = 0, b = 0, c = 0) {
    return a + b + c;
}

sum(2, 3);    //  5

sum();      // 0

function multiply(a, b, c = 1) {
    return a * b * c;
}

multiply(1, 2, 3);  // 6
multiply(1, 2);     // 2

multiply(1);       //  NaN

// ******************************  Web Storage Methods **************************

document.cookie = "name='shubham'; age=30; profession='trainer'";

document.cookie.split(';')[1].split("=")[1];  // 30

//  LocalStorage
//  SessionStorage 


sessionStorage.setItem('userName', 'Shubham');
sessionStorage.getItem('userName');  // Shubham
sessionStorage.clear();


localStorage.setItem();
localStorage.getItem();
localStorage.clear();

// **********************************   Event Handling  *******************

onclick();
onmouseover();
onmouseout();
onchange();

// *******************************  Exception Handling  **************************

// Exception - Runtime Error

try {
    // Vulnerable Code 
}
catch (e) {
    console.log(e);
}
finally {
    // Alawys Run 
}

// **********************************  Scheduling Methods  ***************************

// SetTimeOut
// SetInterval

function sum(a, b) {
    return console.log(a + b);
}

sum(2, 3);

setTimeout(sum, 1000, 3, 4);     // 1000 ms = 1 sec 

setInterval(sum, 5000, 3, 6);

clearInterval(); // to stop the execution of setInterval method

// setTimeOut executes once after given time frame
// setInterval keeps on executing after the given interval timeframe 

// ***********************************  Let, Var & Const   *********************************

// var in ES5

// Drawbacks of working with var

// 1>  var is a global scoped variable 
// 2>  var followed hoisting 

if (true) {
    var interval = 10;
    // using the variable 
}
// access the variable - applicable

// ----------------------------------------

var a = 10;

if (true) {
    a = 20;
    console.log(a);   // 20
}
console.log(a);    // 20

// ---------------------------------------

if (true) {
    var a = 20;
    console.log(a);   // 20
}
console.log(a);    // 20

if (true) {
    let a = 20;
    console.log(a);   // 20
}
console.log(a);    // Error

// ******************************  Hoisting  **********************************

// bottom to top 

console.log(a);  // Error - In all Programming lang except JS 

var a = 20;

// ---------------------------------------------------------------------

// Hoist the declaration of the variable 

console.log(a);   //  undefined

var a = 20;

// ---------------------------------------------------

console.log(a);                 // undefined
if (true) {
    var a = 20;
    console.log(a);              // 20
}
console.log(a);                  //  20

// ----------------------------------------------------

var a = 20;
if (true) {
    const a = 10;
    console.log(a);   // 10
}
console.log(a);       // 20

// var is functional scope & mutable
// let is block scope & mutable
// const is block scope & unmutable

// *******************************  const ******************************

const b = 20;
b = 30;          //  Error : Assignment to constant variable

// const c;          // Missing initializer in const declaration
c = 30;

const abc = 30;

//--------------------------------------------------------------------


let x = 20;

if (true) {
    x = 40;
    console.log(x);  // 40
}
console.log(x);  // 20

// *****************************************  this ************************************

// this points to the current context 

class ABC {
    a = 20;

    b = () => {
        console.log(this.a);
    }
}

var obj1 = new ABC();
obj1.b();                      //  20


// *************************************  IIFE *************************************

// Immediately Invokable Function Expressions

(function (a, b) {
    return a + b;
})(2, 3);     