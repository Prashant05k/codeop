>>> SumZero

let array = [-5, -4, -3, -2, 0, 2, 3, 4, 6, 8];

function getSumZero(){
    for(let i=0; i<array.length; i++){
        for(let j=i+1; j<array.length; j++){
            if(array[i] + array[j] === 0){
                return [array[i], array[j]]
            }
        }
    }
}

console.log(getSumZero()) //Timecomplexity: o(n^2) quadratic
---------------------------------------------------------
let array = [-5, -4, -3, -2, 0, 2, 3, 4, 6, 8];

function getSumZero(arr){
    let l=0, r=arr.length -1;
    while(l<r){
        sum = arr[l] + arr[r]
        if(sum === 0){
            return [arr[l], arr[r]]
        }else if(sum < 0){
            l++
        }else{
            r--
        }
    }
}

console.log(getSumZero(array)) //o(n) linear tc

================================================================

>>> Anagram

let str1 = 'hello', str2 = 'elllo';

function isAnagram(str1, str2){
    if(str1.length !== str2.length){
        return false;
    }
    let counter = {}
    for(let i of str1){
        counter[i] = (counter[i] || 0) + 1
    }
    for(let j of str2){
        if(!counter[j]){
            return false
        }
        counter[j]-=1
    }
    return true
}

console.log(isAnagram(str1, str2)) //tc: we are not using nested loop therefore it's not quadratic tc, we are using loop 2 different time therefore it's linear tc o(n)

//=================================================================
>>> counting unique numbers from sorted array

let arr= [1,2,3,3,3,3,4,4,5,6,6,6,7, 8, 9, 9]

let i = 0, j=1, count = 1;

if(arr.length <= 0){
    throw new Error('Array is empty')
}else{
    while(j<arr.length){
    
        if(arr[i] === arr[j]){
            j++
        }else{
            i++
            count++
            arr[i] = arr[j]
        }
    }
}

console.log(arr, count)

//---------------------------------------------------
console.log([...new Set(arr)])
//-----------------------------------------------------
let obj = {}

for(let i of arr){
    obj[i] = obj[i]
}

console.log(Object.keys(obj).length)

//=======================================================
>>> largerst sum of consecutive digits of unsorted array
1,2,2,3
let arr = [1,2,3,4, 4,2,1,2,2,3,3,4]
let consecutive = 4, l =0;
let times = arr.length - consecutive //1

for(let i=0; i<=times; i++){
    console.log(arr[i])
    let s =0
    for(let j=i; j<i+consecutive; j++){
        s+=arr[j]
    }
    if(s > l){
        l = s
    }
    console.log(s)
}

console.log(l)
------------mine----------------------------------------------
let arr = [1, 2, 3, 4, 4, 2, 1, 2, 2, 3, 3, 4];

let consecutive = 4,
  l = 0;

for (let i = 0; i < arr.length - consecutive; i++) {
  let j = i,
    c = 1,
    sum = 0;
  while (c <= consecutive) {
    sum += arr[j];
    c++;
    j++;
  }
  if (sum > l) {
    l = sum;
  }
}
console.log(l);

//===============================================================================
>>> Find the index of given number in a sorted array

let arr = [1,2,3,4,4,5,6,6,6,7]

let findIndex = 7;

if(arr.length <= 0){
    throw new Error('Array is empty')
}

function index(){
   for(let i=0; i<arr.length; i++){
    if(arr[i] === findIndex){
        return i
    }
} 
return 'Number not found in array'
}

console.log(index())


//==============================================================================
>>> Divide and Conqurer technique
//Find the index of given number in a sorted array.

let arr = [1,2,3,4, 5 ,6, 7 ,8 , 9] 7
   n       d       x
1,2,3,4,5,6,7,8,9
             n d   x
1,2,3,4   6,7,8,9
               d
            7

if(arr.length < 0){
  throw new Error('Array is empty')
}
let min = 0, max = arr.length -1

let mid, n=9

function bindarySearch(){
  while(min <= max){
    mid = Math.floor((min + max)/2)
console.log(`min ${arr[min]} mid ${arr[mid]} max ${arr[max]}`) //tc:binary o log(n) //better than linear
    if(arr[mid] < n){
        min = mid + 1
        console.log(min)
    }else if(arr[mid] > n){
        max = mid - 1
        console.log(max)
    }else{
        return mid
    }
}  
return 'Number not found in an array'
}

console.log(bindarySearch())

//==============================================================================
>>> #7 Check square elements of another array
const arr1 = [1, 2, 3, 4];
const arr2 = [1, 9, 4, 16];

function checkSquare(arr1, arr2) {
  for (let i = 0; i < arr1.length; i++) {
    let isSquare = false;
    for (let j = 0; j < arr2.length; j++) {
      if (arr1[i] * arr1[i] === arr2[j]) {
        isSquare = true;
        break;
      }
      if (j === arr2.length - 1) {
        if (!isSquare) {
          return false;
        }
      }
    }
  }
  return true;
}

console.log(checkSquare(arr1, arr2)); //tc: o(n)^2
//----------------------------------------------------------
#8
const arr1 = [1, 2, 2, 4];
const arr2 = [1, 4, 4, 16];

function checkSquare(arr1, arr2) {
  const map1 = {};
  const map2 = {};
  for (let i of arr1) {
    map1[i] = (map1[i] || 0) + 1;
  }
  for (let i of arr2) {
    map2[i] = (map2[i] || 0) + 1;
  }
  for (let i in map1) {
    if (!map2[i * i] || map1[i] !== map2[i * i]) {
      return false;
    }
  }
  return true;
}

console.log(checkSquare(arr1, arr2)); //tc: o(n) -> linear

//------------------ mine ---------------------------------
const arr1 = [1, 2, 2, 4];
const arr2 = [1, 4, 4, 16];

function checkSquare(arr1, arr2) {
  const obj = {};
  for (let i of arr1) {
    obj[i * i] = i;
  }
  for (let i of arr2) {
    if (!obj[i]) return false;
  }
  return true;
}

console.log(checkSquare(arr1, arr2)); //tc: o(n)

------------------------------------------------------------------------
const array1 = [1, 2, 3, 4, 2, 4];
const array2 = [1, 9, 4, 16, 4, 4];

function checkSquare(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    throw "Invalid entry";
    return;
  }

  let obj2 = {};

  for (let i of arr2) {
    obj2[i] = (obj2[i] || 0) + 1;
  }

  for (let i of arr1) {
    if (!obj2[i * i]) {
      return ` Square of ${i} i.e ${i * i} not found in arr2`;
    }

    obj2[i * i] -= 1;
  }

  return obj2;
}

const res = checkSquare(array1, array2);
console.log(res);
//==============================================================================
>>> #9 Recursion

let counter = 1;
function recursion(num) {
  if (counter > num) return;
  console.log("counter: ", counter);
  counter++;
  recursion(10);
}
recursion(10);

//==============================================================================
>>> 10 Sorting using recursive fn/advance rf
const array = [2, 5, 4, 1, 0, 8];

let i = 0;
let j = 1;
function isSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > arr[i + 1]) return false;
  }
  return true;
}
function sortArray(arr) {
  if (isSort(arr)) {
    console.log(arr);
    return;
  } else {
    if (arr[i] > arr[j]) {
      [arr[i], arr[j]] = [arr[j], arr[i]];
      i = 0;
      j = 1;
    } else {
      i++;
      j++;
    }
    // console.log("not sorted");
    sortArray(arr);
  }
}
sortArray(array);
//------ mine ---------------------------
const arr = [2, 5, 4, 10, 2, 1, 8];
let i = 0;
function recur(i) {
  console.log(i);
  if (i === arr.length - 1) return;
  let j = 0;
  let temp;
  while (j < arr.length - i) {
    if (arr[j] > arr[j + 1]) {
      [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
    }
    j++;
  }

  i++;
  recur(i);
}
recur(i);
console.log(arr);
//==============================================================================
>>> 12 Helper Recursive Function

const array = [1, 2, 3, 4, 5, 6, 7, 8, 9];

function findOdd(arr) {
  let OddArr = [];
  function findInThis(arr) {
    if (arr.length === 0) {
      return;
    }
    if (arr[0] % 2 !== 0) {
      OddArr.push(arr[0]);
    }
    findInThis(arr.slice(1));
  }
  findInThis(arr);
  return OddArr;
}

const res = findOdd(array);
console.log(res);
//==============================================================================
>>> 13 Linear Search Algo
let array = [
  { uName: "abc", email: "abc@gmail.com" },
  { uName: "def", email: "def@gmail.com" },
  { uName: "ghi", email: "ghi@gmail.com" },
  { uName: "jkl", email: "jkl@gmail.com" },
];

function Search(arr, value) {
  for (let i of arr) {
    if (i["uName"] === value) return true;
  }
  return false;
}

const res = Search(array, "ghi");
console.log(res); //tc: linear o(n)
//==============================================================================
>>> Sorting Mine
function bubbleSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = i + 1; j < arr.length; j++) {
        c++;
      if (arr[i] > arr[j]) {
        [arr[i], arr[j]] = [arr[j], arr[i]];
        console.log(arr);
      }
    }
  }
}

bubbleSort(array);
console.log(array, c);
//==============================================================================
>>> 15 Bubble Sorting
let array = [10, 2, 1, 32, 8, 4, 0];
let c=0;
function bubbleSort(arr) {
  for (let i = arr.length; i > 0; i--) {
    for (let j = 0; j < i - 1; j++) {
        c++;
      if (arr[j] > arr[j + 1]) {
        // console.log(">>> ", arr);
        [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];
        // console.log(arr);
      }
    }
  }
}

bubbleSort(array);
console.log(array, c);
//==============================================================================
>>> 19 Maximum occuring character in a string
let str = "hello world";
let l = 0;
let index;
let obj = {};

for (let i of str.toLowerCase()) {
  obj[i] = (obj[i] || 0) + 1;
}

for (let i in obj) {
  if (obj[i] > l) {
    l = obj[i];
    index = i;
  }
}
console.log(index);
//==============================================================================
>>> 20 Palindrome
let string = "helleh";

let l = 0;
let r = string.length - 1;

function isPalindrome(str) {
  while (l < r) {
    if (str[l] !== str[r]) {
      console.log("not a palindrome");
      return;
    }
    l++;
    r--;
  }
  console.log("it is palindrome");
}

isPalindrome(string);

//==============================================================================
>>> 
//==============================================================================
>>> 
//==============================================================================
>>> 
//==============================================================================
>>> 



&&&&&&&&&&&&&&&&&&&&&&&&&  Mine  &&&&&&&&&&&&&&&&&&&&&&&&&&

let array = [-5, -4, 2, 3, 4, 6, -3, -2, 0, 8];

function findLargestUnsorted(){
    let l = 0, ini, inj;
    for(let i=0; i<array.length; i++){
        for(let j=i+1; j<array.length; j++){
            if(array[i] + array[j] > l){
                l = array[i] + array[j]
                ini = i, inj = j
            }
        }
    }
    return [array[ini], array[inj], l]
}

console.log(findLargestUnsorted())

-------------------------------------------------------------
let arr = [1,-1,-9, 9, 0, 0, 0, 8, 4, 0, 0, 2, 0, 7, 0, 6, 0, 9];
let i = 0,
  j = arr.length - 1;

while (i < j) {
  if (arr[i] === 0) {
    while (arr[j] === 0) {
      j--;
    }
    [arr[i], arr[j]] = [arr[j], arr[i]];
    j--;
  }
  i++;
}

console.log(arr);

-------------------------------------------------------------------

// How do you count the number of vowels, consonants, digits and special characters  in a given string?

const string = "geeks for geeks121@#$%^&*()_+-=";

function countForString(str) {
  if (str === "") {
    throw ("Invalid string");
    r0..
    3eturn;
  }   

  const vowCount = {},
    conCount = {},
    numCount = {},
    specCount = {};
  const vow = "aeiou",
    con = "bcdfghjklmnpqrstuvwxyz",
    num = "0123456789",
    spec = `\`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`;

  for (let i of str) {
    let letter = i.toLowerCase();
    if (vow.includes(letter)) {
      vowCount[letter] = (vowCount[letter] || 0) + 1;
    } else if (con.includes(letter)) {
      conCount[letter] = (conCount[letter] || 0) + 1;
    } else if (num.includes(letter)) {
      numCount[letter] = (numCount[letter] || 0) + 1;
    } else if (spec.includes(letter)) {
      specCount[letter] = (specCount[letter] || 0) + 1;
    } 
  }

//   for (let i of str) {
//     let letter = i.toLowerCase();
//     if (letter.match(/[aeiou]/)) {
//       vowCount[letter] = (vowCount[letter] || 0) + 1;
//     } else if (letter.match(/[bcdfghjklmnpqrstuvwxyz]/)) {
//       conCount[letter] = (conCount[letter] || 0) + 1;
//     } else if (letter.match(/[0123456789]/)) {
//       numCount[letter] = (numCount[letter] || 0) + 1;
//     } else if (letter.match(/[\`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/)) {
//       specCount[letter] = (specCount[letter] || 0) + 1;
//     } 
//   }

  return [vowCount, conCount, numCount, specCount];
}

const [vowCount, conCount, numCount, specCount] = countForString(string);

console.log(vowCount, conCount, numCount, specCount);

//------------------------------------------------------------------------------------
let string = "meeting"; // op- 'emtenig'

function getReverse(str) {
  if (!str.length) {
    throw "invalid string";
  }

  let newStr = "";

  for (let i = 0; i < str.length; i += 2) {
    if (str.length - 1 !== i) {
      newStr += str[i + 1];
    }
    newStr += str[i];
  }

  return newStr;
}

const res = getReverse(string);
console.log(res);

//-----------------------------------------------------------------------

let string = "mee   tin   gsd"; //eem   nit   dsg

function performOps(str) {
  let newStr = "";
  for (let i = 0; i < str.length; i += 3) {
    if (i !== str.length - 1) {
      if (i !== str.length - 2) {
        newStr += str[i + 2];
      }
      newStr += str[i + 1];
    }

    newStr += str[i];
  }
  return newStr;
}

const res = performOps(string);
console.log(res);

//--------------------------------------------------------------------------------

sumthree = 0

let array = [-3, -2, -1, 0, 1, 2, 3, 4];

function sumZero(arr) {
  let i = 0,
    j = 1,
    k = arr.length - 1;

  while (j < k) {
    let sum = arr[i] + arr[j] + arr[k];
    if (sum === 0) {
      console.log(arr[i], arr[j], arr[k]);
      return;
    } else if (sum > 0) {
      k--;
    } else {
      j++;
      if (j === k - 1) {
        i++;
      }
    }
  }
}

sumZero(array);

---------------------------------------------------------------------------------------------

let array = [ -2, -1, 0, -2, 0, 8, 1, 2, 3, 4];

function sumZero(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = i + 1; j < arr.length; j++) {
      for (let k = j + 1; k < arr.length; k++) {
        const sum = arr[i] + arr[j] + arr[k];
        if (sum === 0) {
          console.log(arr[i], arr[j], arr[k]);
          return;
        }
      }
    }
  }
}

sumZero(array);

-------------------------------------------------------------

const input = [1, 2, [3, 4], [5, [6, 7, 8]], [9, 10]];
// Output = [1,2,3,4,5,6,7,8,9,10]
let newArr = [];
function getElement(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
    //   for(let j=0; j<arr[i].length; j++){
    //       newArr.push(arr[i][j]);
    //   }
      getElement(arr[i]);
    } else {
      newArr.push(arr[i]);
    }
  }
  return newArr;
}

console.log(getElement(input));

-------------------------------------------------------------------

function checkTwo(arr) {
  let obj = {};

  for (let i = 0; i < arr.length; i++) {
    obj[arr[i]] = (obj[arr[i]] || 0) + 1;
  }

  let keys = Object.keys(obj);

  if(obj[keys[0]] === obj[keys[1]]){
    console.log('tie')
    return;
  }else if(obj[keys[0]] > obj[keys[1]]){
    console.log('1 win')
    return;
  }else{
    console.log('2 win');
    return;
  }

  console.log(keys);
}
let array = [1, 2,2,2,1, 1, 2, 2, 1];
checkTwo(array);

-----------------------------------------------------

// Example 1:

// let nums = [2,7,11,15], target = 9
// Output: [0,1]
// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
// Example 2:

// let nums = [3,2,4], target = 6
// Output: [1,2]
// Example 3:

let nums = [3,3], target = 6
// Output: [0,1]

// let nums = [7, 11, 3, 6, 15],
//   target = 9;
var twoSum = function (nums, target) {
  let i = 0;
  let j = i + 1;
  while (i <= j) {
    console.log(i, j);
    let sum = nums[i] + nums[j];
    if (sum === target) {
      return [i, j, sum];
    } else if (j === nums.length) {
      i++;
      j = i + 1;
    } else {
      j++;
    }
  }
};

console.log(twoSum(nums, target));

-----------------------------------------------------------------------63moons

// From Hiral to Everyone 01:33 PM
// let a = 10;
// var a = 20;
// console.log(a);
// console.log(typeof undefined);
// console.log(typeof null);
// console.log(typeof NULL);
// console.log(typeof typeof 1);
// var a=3;
// console.log(a,b,c)
// var b=a++;
// console.log(a,b,c)
// var c=++a;
// console.log(a,b,c)
// function func2() {
//   return;
//   {
//     name: "Prashant";
//   }
// }
// console.log(func2());
// function func2() {
//   return;
//   {
//     name: "Prashant";
//   }
// }
// console.log(func2());
// function func2() {
//   return  {
//     name: "Full Stack Tutorials"  }
// }
// console.log(func2());
// function func2() {
//   return;
//   {
//     name: "Full Stack Tutorials";
//   }
// }
// console.log(func2());
const a = { x: 1, y: 2 };
const b = a;
b.x = 3;
console.log(a);
console.log(b);


------------------------------------------


//   const [date, setDate] = useState(new Date());
//   let idClock;

//   function startBtn() {
//     idClock = setInterval(() => {
//       setDate(new Date());
//     }, 1000);
//   }
// // console.log(idClock)
//   function stopBtn() {
//     setDate(new Date());
//     console.log(idClock);
//     // clearTimeout(idClock);
//     clearInterval(idClock)
//   }

  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        {/* {date.toString()}
        <button onClick={startBtn}>Start</button>
        <button onClick={stopBtn}>Stop</button> */}
      </header>
    </div>
  );